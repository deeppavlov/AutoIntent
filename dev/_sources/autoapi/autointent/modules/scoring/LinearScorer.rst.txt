autointent.modules.scoring.LinearScorer
=======================================

.. py:class:: autointent.modules.scoring.LinearScorer(embedder_name, cv = 3, n_jobs = None, embedder_device = 'cpu', seed = 0, batch_size = 32, max_length = None, embedder_use_cache = False)

   Bases: :py:obj:`autointent.modules.abc.ScoringModule`


   Scoring module for linear classification using logistic regression.

   This module uses embeddings generated from a transformer model to train a
   logistic regression classifier for intent classification.

   :ivar classifier_file_name: Filename for saving the classifier to disk.
   :ivar embedding_model_subdir: Directory for saving the embedding model.
   :ivar precomputed_embeddings: Flag indicating if embeddings are precomputed.
   :ivar db_dir: Path to the database directory.
   :ivar name: Name of the scorer, defaults to "linear".

   Example
   --------
   .. testcode::

       from autointent.modules import LinearScorer
       scorer = LinearScorer(
           embedder_name="sergeyzh/rubert-tiny-turbo", cv=2
       )
       utterances = ["hello", "goodbye", "allo", "sayonara"]
       labels = [0, 1, 0, 1]
       scorer.fit(utterances, labels)
       test_utterances = ["hi", "bye"]
       probabilities = scorer.predict(test_utterances)
       print(probabilities)

   .. testoutput::

       [[0.50000032 0.49999968]
        [0.50000032 0.49999968]]



   .. py:attribute:: classifier_file_name
      :type:  str
      :value: 'classifier.joblib'



   .. py:attribute:: embedding_model_subdir
      :type:  str
      :value: 'embedding_model'



   .. py:attribute:: precomputed_embeddings
      :type:  bool
      :value: False



   .. py:attribute:: db_dir
      :type:  str


   .. py:attribute:: name
      :value: 'linear'



   .. py:attribute:: cv
      :value: 3



   .. py:attribute:: n_jobs
      :value: None



   .. py:attribute:: embedder_device
      :value: 'cpu'



   .. py:attribute:: seed
      :value: 0



   .. py:attribute:: embedder_name


   .. py:attribute:: batch_size
      :value: 32



   .. py:attribute:: max_length
      :value: None



   .. py:attribute:: embedder_use_cache
      :value: False



   .. py:method:: from_context(context, embedder_name = None)
      :classmethod:


      Create a LinearScorer instance using a Context object.

      :param context: Context containing configurations and utilities.
      :param embedder_name: Name of the embedder, or None to use the best embedder.
      :return: Initialized LinearScorer instance.



   .. py:method:: get_embedder_name()

      Get the name of the embedder.

      :return: Embedder name.



   .. py:method:: fit(utterances, labels)

      Train the logistic regression classifier.

      :param utterances: List of training utterances.
      :param labels: List of labels corresponding to the utterances.
      :raises ValueError: If the vector index mismatches the provided utterances.



   .. py:method:: predict(utterances)

      Predict probabilities for the given utterances.

      :param utterances: List of query utterances.
      :return: Array of predicted probabilities for each class.



   .. py:method:: clear_cache()

      Clear cached data in memory used by the embedder.



   .. py:method:: dump(path)

      Save the LinearScorer's metadata, classifier, and embedder to disk.

      :param path: Path to the directory where assets will be dumped.



   .. py:method:: load(path)

      Load the LinearScorer's metadata, classifier, and embedder from disk.

      :param path: Path to the directory containing the dumped assets.


