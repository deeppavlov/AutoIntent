Optimization
===================

В этом разделе вы узнаете, как работает переборная оптимизация в нашей библиотеке.

План:

- постановка задачи
- 
- жадная оптимизация пайплайна
- почему она может быть полезна
- класс NodeOptimizer и PipelineOptimizer
- объект Context

Пайплайн
--------

Весь процесс конфигурации классификатора в нашей библиотеке разбит на последовательные шаги:

- подбор эмбедера (EmbeddingNode)
- подбора классификатора (ScoringNode)
- подбора решающего правила (PredictionNode)

У каждого шага свое множество гиперпараметров. Чтобы теоретически гарантировать нахождение идеальной конфигурации методом перебора, необходимо проверить каждый элемент декартова произведения множеств гиперпараметров этих шагов (grid search). На практике добиться этого обычно нельзя, поскольку чисто комбинаций слишком велико.

Жадная стратегия
----------------

Это один из способов решения проблемы неподъемного количества комбинаций. В нашем случае алгоритм жадной оптимизации следующий:

1. Перебрать гиперпараметры эмбедера и зафиксировать лучший
2. Перебрать гиперпараметры классификатора и зафиксировать лучший
3. Перебрать гиперпараметры решающего правила и зафиксировать лучшее

Такой алгоритм проверяет меньше комбинаций, за счет чего и происходит ускорение. Для реализации такого алгоритма необходимо уметь оценивать качество не только финального предсказания всего пайплайна, но и его промежуточных предсказаний. Главный минус такого подхода в том, что принимаемые решения оптимальны только локально, но не глобально. Метрики для оценки промежуточных предсказаний являются лишь прокси-сигналом хорошести финального предсказания.

Такой подход существует в нашей библиотеке с релиза v0.0.1.

Случайный перебор
----------------------

Более простой стратегией является взятие случайного подмножества полного пространства поиска (random grid search). Простой стратегией является перебор всех комбинаций в случайном порядке до момента исчерпания некоторого временного бюджета. 

Такой подход более глупый чем жадная стратегия, потому что в любой момент случайного перебора комбинаций могут без конца возникать комбинации, в которых используется плохой эмбедер. Жадная стратегия отсеяла бы такой эмбедер в самом начале и больше не возвращалась.

С другой стороны случайный перебор чисто по построению не опирается ни на какие локальные решения.

Реализация такого метода оптимизации запланирована на релиз v0.1.0.

Байесовская оптимизация
-----------------------

Это как случайный перебор по подмножеству, только во время перебора мы пытаемяс моделировать вероятностное пространство гиперпараметров. Это позволяет избегать повторение значений гиперпараметров, которые ранее показали себя плохо. А сам поиск старается балансировать между эксплорацией и эксплуатацией.