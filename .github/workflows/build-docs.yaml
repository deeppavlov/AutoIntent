name: Build and Publish Multi-Version Docs

on:
  push:
    branches:
      - dev
      - multiversion
  release:
    types:
      - published
  pull_request:
    branches:
      - dev
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/dev' }}

permissions:
  contents: write

jobs:
  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: setup poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      - name: Install pandoc
        run: |
          sudo apt install pandoc

      - name: Install dependencies
        run: |
          poetry install --with docs

      - name: Test documentation build
        if: github.event_name == 'pull_request' && github.base_ref == 'dev'
        run: |
          echo "Testing documentation build for PR..."
          poetry run sphinx-build docs/source docs/build/html


      - name: Generate missing tags list
        if: github.event_name == 'push' || github.event_name == 'release'
        id: missing_tags
        run: |
          # Fetch existing documentation versions from gh-pages
          mkdir -p existing_versions
          git fetch origin gh-pages --depth=1
          git checkout origin/gh-pages -- versions || true
          
          # List existing tags and built versions
          EXISTING_VERSIONS=$(ls versions | tr '\n' ' ')
          ALL_TAGS=$(git tag --list "v*" | tr '\n' ' ')
          
          # Find missing tags
          MISSING_TAGS=""
          for TAG in $ALL_TAGS; do
            if [[ ! " $EXISTING_VERSIONS " =~ " $TAG " ]]; then
              MISSING_TAGS+="$TAG "
            fi
          done
          
          echo "Missing tags: $MISSING_TAGS"
          echo "missing_tags=${MISSING_TAGS}" >> $GITHUB_ENV

      - name: Build documentation for missing tags
        if: env.missing_tags != ''
        run: |
          for TAG in ${{ env.missing_tags }}; do
            echo "Building docs for $TAG..."
            git checkout $TAG
            mkdir -p docs/build/versions/$TAG
            poetry run sphinx-build docs/source docs/build/versions/$TAG
          done

      - name: Build documentation for dev branch
        # if: github.ref == 'refs/heads/dev'
        run: |
          echo "Building docs for dev branch..."
          poetry run sphinx-build docs/source docs/build/versions/dev

      - name: Deploy to GitHub Pages
        # if: github.event_name != 'pull_request'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ github.token }}
          publish_dir: docs/build/versions
          keep_files: true

  update-static:
    name: Update Static Files in Old Releases
    runs-on: ubuntu-latest
    needs: build-docs

    steps:
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          fetch-depth: 0

      - name: Update _static in all versions
        run: |
          # Define path to the updated _static directory
          UPDATED_STATIC_DIR=docs/source/_static
          TARGET_STATIC_DIRS=$(find versions/ -type d -name "_static")
          
          # Copy updated _static to all versions
          for DIR in $TARGET_STATIC_DIRS; do
            echo "Updating $DIR..."
            cp -r ${UPDATED_STATIC_DIR}/* ${DIR}/
          done

      - name: Commit and push changes
        run: |
          git add .
          git commit -m "Update _static files in all documentation versions" || echo "No changes to commit"
          git push
        # with:
        #   github_token: ${{ github.token }}

