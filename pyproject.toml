[tool.poetry]
name = "autointent"
version = "0.2.1-alpha1"
description = "A tool for automatically configuring a text classification pipeline for intent prediction."
authors = ["voorhs <ilya_alekseev_2016@list.ru>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"
sentence-transformers = "3.0.1"
scikit-learn = "1.5.1"
scikit-multilearn = "0.2.0"
appdirs = "^1.4.4"
sre-yield = "^1.2"
optuna = "^4.0.0"
xeger = "^0.4.0"
pathlib = "^1.0.1"
pydantic = "^2.9.2"
hydra-core = "^1.3.2"
faiss-cpu = "^1.9.0"
openai = "^1.52.1"
datasets = "^3.1.0"
ruff = "^0.8.0"


[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
tach = "^0.11.3"
ipykernel = "^6.29.5"
ipywidgets = "^8.1.5"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "8.3.2"
pytest-cov = "^5.0.0"
coverage = "^7.6.1"
pytest-asyncio = "^0.24.0"

[tool.poetry.group.typing]
optional = true

[tool.poetry.group.typing.dependencies]
mypy = "^1"
types-pyyaml = "^6.0.12.20240917"
types-pygments = "^2.18.0.20240506"
types-setuptools = "^75.2.0.20241019"
joblib-stubs = "^1.4.2.5.20240918"


[tool.poetry.group.docs.dependencies]
sphinx = "^8.1.3"
pydata-sphinx-theme = "^0.16.0"
jupytext = "^1.16.4"
nbsphinx = "^0.9.5"
sphinx-autodoc-typehints = "^2.5.0"
sphinx-copybutton = "^0.5.2"

[tool.poetry.group.docs]
optional = true

[tool.poetry.scripts]
"autointent" = "autointent.pipeline.optimization.cli_endpoint:main"
"autointent-inference" = "autointent.pipeline.inference.cli_endpoint:main"
"clear-cache" = "autointent.context.vector_index_client.cache:clear_chroma_cache"

[tool.ruff]
line-length = 120
indent-width = 4
exclude = ["experiments", "scripts"]
target-version = "py310"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D",       # pydocstyle
    "TD",      # todos
    "FIX",     # fixmes
    "S311",    # random usage
    "COM812",  # trailing commas
    "ISC001",  # implicit string concatenation
    "ERA001",  # commented code
    "FBT",     # boolean trap
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "D104"]
"tests/*.py" = ["S", "PLR2004", "ERA", "D", "ANN", "SLF"]
"autointent/modules/*" = ["ARG002", "ARG003"]  # unused argument
"docs/*" = ["INP001", "A001", "D"]
"*/utils.py" = ["D104", "D100"]
"tutorials/*" = ["INP001", "T"]

[tool.ruff.lint.pylint]
max-args = 10

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra" # `--cov` option breaks pycharm's test debugger
testpaths = [
    "tests",
]
pythonpath = "autointent"

[tool.coverage.run]
branch = true
omit = [
    "__init__.py",
]

[tool.coverage.paths]
source = [
    "autointent/",
]

[tool.coverage.report]
skip_empty = true


[tool.mypy]
python_version = "3.10"
strict = true
warn_redundant_casts = true
plugins = [
    "pydantic.mypy",
    "numpy.typing.mypy_plugin",
]
mypy_path = "autointent"
disable_error_code = ["override"]

[[tool.mypy.overrides]]
module = [
    "scipy",
    "sklearn",
    "sklearn.*",
    "xeger",
    "appdirs",
    "sre_yield",
    "skmultilearn.model_selection",
    "omegaconf",
    "hydra",
    "hydra.*",
    "transformers",
    "faiss",
    "datasets",
    "joblib",
]
ignore_missing_imports = true
