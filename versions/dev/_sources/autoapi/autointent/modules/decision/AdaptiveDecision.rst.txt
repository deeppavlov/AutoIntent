autointent.modules.decision.AdaptiveDecision
============================================

.. py:class:: autointent.modules.decision.AdaptiveDecision(search_space = None)

   Bases: :py:obj:`autointent.modules.abc.DecisionModule`


   Decision for multi-label classification using adaptive thresholds.

   The AdaptiveDecision calculates optimal thresholds based on the given
   scores and labels, ensuring the best performance on multi-label data.

   :ivar metadata_dict_name: Filename for saving metadata to disk.
   :ivar n_classes: Number of classes in the dataset.
   :ivar _r: Scaling factor for thresholds.
   :ivar tags: List of Tag objects for mutually exclusive classes.
   :ivar name: Name of the predictor, defaults to "adaptive".

   Examples
   --------
   .. testcode::

       from autointent.modules.decision import AdaptiveDecision
       import numpy as np
       scores = np.array([[0.8, 0.1, 0.4], [0.2, 0.9, 0.5]])
       labels = [[1, 0, 0], [0, 1, 0]]
       predictor = AdaptiveDecision()
       predictor.fit(scores, labels)
       decisions = predictor.predict(scores)
       print(decisions)

   .. testoutput::

       [[1 0 0]
        [0 1 0]]



   .. py:attribute:: metadata_dict_name
      :value: 'metadata.json'



   .. py:attribute:: n_classes
      :type:  int


   .. py:attribute:: tags
      :type:  list[autointent.schemas.Tag] | None


   .. py:attribute:: name
      :value: 'adaptive'



   .. py:attribute:: search_space
      :value: None



   .. py:method:: from_context(context, search_space = None)
      :classmethod:


      Create an AdaptiveDecision instance using a Context object.

      :param context: Context containing configurations and utilities.
      :param search_space: List of threshold scaling factors, or None for default.
      :return: Initialized AdaptiveDecision instance.



   .. py:method:: fit(scores, labels, tags = None)

      Fit the predictor by optimizing the threshold scaling factor.

      :param scores: Array of shape (n_samples, n_classes) with predicted scores.
      :param labels: List of true multi-label targets.
      :param tags: List of Tag objects for mutually exclusive classes, or None.
      :raises WrongClassificationError: If used on non-multi-label data.



   .. py:method:: predict(scores)

      Predict labels for the given scores.

      :param scores: Array of shape (n_samples, n_classes) with predicted scores.
      :return: Array of shape (n_samples, n_classes) with predicted binary labels.
      :raises InvalidNumClassesError: If the number of classes does not match the trained predictor.



   .. py:method:: dump(path)

      Save the predictor's metadata to disk.

      :param path: Path to the directory where metadata will be saved.



   .. py:method:: load(path)

      Load the predictor's metadata from disk.

      :param path: Path to the directory containing saved metadata.


