autointent.modules.scoring.MLKnnScorer
======================================

.. py:class:: autointent.modules.scoring.MLKnnScorer(k, embedder_name, db_dir = None, s = 1.0, ignore_first_neighbours = 0, embedder_device = 'cpu', batch_size = 32, max_length = None, embedder_use_cache = False)

   Bases: :py:obj:`autointent.modules.abc.ScoringModule`


   Multi-label k-nearest neighbors (ML-KNN) scorer.

   This module implements ML-KNN, a multi-label classifier that computes probabilities
   based on the k-nearest neighbors of a query instance.

   :ivar arrays_filename: Filename for saving probabilities to disk.
   :ivar metadata: Metadata about the scorer's configuration.
   :ivar prebuilt_index: Flag indicating if the vector index is prebuilt.
   :ivar name: Name of the scorer, defaults to "mlknn".

   Example
   --------
   .. testsetup::

       db_dir = "doctests-db"

   .. testcode::

       from autointent.modules.scoring import MLKnnScorer
       utterances = ["what is your name?", "how are you?"]
       labels = [[1,0], [0,1]]
       scorer = MLKnnScorer(
           k=5,
           embedder_name="sergeyzh/rubert-tiny-turbo",
           db_dir=db_dir,
       )
       scorer.fit(utterances, labels)
       test_utterances = ["Hi!", "What's up?"]
       probabilities = scorer.predict(test_utterances)
       print(probabilities)  # Outputs predicted probabilities for each label

   .. testoutput::

       [[0.5 0.5]
        [0.5 0.5]]

   .. testcleanup::

       import shutil
       shutil.rmtree(db_dir)



   .. py:attribute:: arrays_filename
      :type:  str
      :value: 'probs.npz'



   .. py:attribute:: metadata
      :type:  MLKnnScorerDumpMetadata


   .. py:attribute:: prebuilt_index
      :type:  bool
      :value: False



   .. py:attribute:: name
      :value: 'mlknn'



   .. py:attribute:: k


   .. py:attribute:: embedder_name


   .. py:attribute:: s
      :value: 1.0



   .. py:attribute:: ignore_first_neighbours
      :value: 0



   .. py:attribute:: embedder_device
      :value: 'cpu'



   .. py:attribute:: batch_size
      :value: 32



   .. py:attribute:: max_length
      :value: None



   .. py:attribute:: embedder_use_cache
      :value: False



   .. py:property:: db_dir
      :type: str


      Get the database directory for the vector index.

      :return: Path to the database directory.



   .. py:method:: from_context(context, k, s = 1.0, ignore_first_neighbours = 0, embedder_name = None)
      :classmethod:


      Create an MLKnnScorer instance using a Context object.

      :param context: Context containing configurations and utilities.
      :param k: Number of nearest neighbors to consider.
      :param s: Smoothing parameter for probability calculations, defaults to 1.0.
      :param ignore_first_neighbours: Number of closest neighbors to ignore, defaults to 0.
      :param embedder_name: Name of the embedder, or None to use the best embedder.
      :return: Initialized MLKnnScorer instance.



   .. py:method:: get_embedder_name()

      Get the name of the embedder.

      :return: Embedder name.



   .. py:method:: fit(utterances, labels)

      Fit the scorer by training or loading the vector index and calculating probabilities.

      :param utterances: List of training utterances.
      :param labels: List of multi-label targets for each utterance.
      :raises TypeError: If the labels are not multi-label.
      :raises ValueError: If the vector index mismatches the provided utterances.



   .. py:method:: predict_labels(utterances, thresh = 0.5)

      Predict labels for the given utterances.

      :param utterances: List of query utterances.
      :param thresh: Threshold for binary classification, defaults to 0.5.
      :return: Predicted labels as a binary array.



   .. py:method:: predict(utterances)

      Predict probabilities for the given utterances.

      :param utterances: List of query utterances.
      :return: Array of predicted probabilities for each class.



   .. py:method:: predict_with_metadata(utterances)

      Predict probabilities along with metadata for the given utterances.

      :param utterances: List of query utterances.
      :return: Tuple of probabilities and metadata with neighbor information.



   .. py:method:: clear_cache()

      Clear cached data in memory used by the vector index.



   .. py:method:: dump(path)

      Save the MLKnnScorer's metadata and probabilities to disk.

      :param path: Path to the directory where assets will be dumped.



   .. py:method:: load(path)

      Load the MLKnnScorer's metadata and probabilities from disk.

      :param path: Path to the directory containing the dumped assets.


