autointent.context.vector_index_client.VectorIndex
==================================================

.. py:class:: autointent.context.vector_index_client.VectorIndex(model_name, embedder_device, embedder_batch_size = 32, embedder_max_length = None, embedder_use_cache = False)

   A class for managing a vector index using FAISS and embedding models.

   This class allows adding, querying, and managing embeddings and their associated
   labels for efficient nearest neighbor search.


   .. py:attribute:: model_name


   .. py:attribute:: embedder


   .. py:attribute:: embedder_device


   .. py:attribute:: labels
      :type:  list[autointent.custom_types.LabelType]
      :value: []



   .. py:attribute:: texts
      :type:  list[str]
      :value: []



   .. py:attribute:: logger


   .. py:method:: add(texts, labels)

      Add texts and their corresponding labels to the index.

      :param texts: List of input texts.
      :param labels: List of labels corresponding to the texts.



   .. py:method:: is_empty()

      Check if the index is empty.

      :return: True if the index contains no embeddings, False otherwise.



   .. py:method:: delete()

      Delete the vector index and all associated data from disk and memory.



   .. py:method:: clear_ram()

      Clear the vector index from RAM.



   .. py:method:: get_all_embeddings()

      Retrieve all embeddings stored in the index.

      :return: Array of all embeddings.
      :raises ValueError: If the index has not been created yet.



   .. py:method:: get_all_labels()

      Retrieve all labels stored in the index.

      :return: List of all labels.



   .. py:method:: query(queries, k)

      Query the index to retrieve nearest neighbors.

      :param queries: List of text queries or embedding vectors.
      :param k: Number of nearest neighbors to return for each query.
      :return: A tuple containing:
               - `labels`: List of retrieved labels for each query.
               - `distances`: Corresponding distances for each neighbor.
               - `texts`: Corresponding texts for each neighbor.



   .. py:method:: dump(dir_path)

      Save the index and associated data to disk.

      :param dir_path: Directory path to save the data.



   .. py:method:: load(dir_path)

      Load the index and associated data from disk.

      :param dir_path: Directory path where the data is stored.


