autointent.modules.scoring.KNNScorer
====================================

.. py:class:: autointent.modules.scoring.KNNScorer(embedder_name, k, weights = 'distance', db_dir = None, embedder_device = 'cpu', batch_size = 32, max_length = None, embedder_use_cache = False)

   Bases: :py:obj:`autointent.modules.abc.ScoringModule`


   K-nearest neighbors (KNN) scorer for intent classification.

   This module uses a vector index to retrieve nearest neighbors for query utterances
   and applies a weighting strategy to compute class probabilities.

   :ivar weights: Weighting strategy used for scoring.
   :ivar _vector_index: VectorIndex instance for neighbor retrieval.
   :ivar name: Name of the scorer, defaults to "knn".
   :ivar prebuilt_index: Flag indicating if the vector index is prebuilt.

   Examples
   --------
   .. testsetup::

       db_dir = "doctests-db"

   .. testcode::

       from autointent.modules.scoring import KNNScorer
       utterances = ["hello", "how are you?"]
       labels = [0, 1]
       scorer = KNNScorer(
           embedder_name="sergeyzh/rubert-tiny-turbo",
           k=5,
           db_dir=db_dir,
       )
       scorer.fit(utterances, labels)
       test_utterances = ["hi", "what's up?"]
       probabilities = scorer.predict(test_utterances)
       print(probabilities)  # Outputs predicted class probabilities for the utterances

   .. testoutput::

       [[0.67297815 0.32702185]
        [0.44031678 0.55968322]]

   .. testcleanup::

       import shutil
       shutil.rmtree(db_dir)



   .. py:attribute:: weights
      :type:  autointent.custom_types.WEIGHT_TYPES


   .. py:attribute:: name
      :value: 'knn'



   .. py:attribute:: prebuilt_index
      :type:  bool
      :value: False



   .. py:attribute:: max_length
      :type:  int | None


   .. py:attribute:: embedder_name


   .. py:attribute:: k


   .. py:attribute:: embedder_device
      :value: 'cpu'



   .. py:attribute:: batch_size
      :value: 32



   .. py:attribute:: embedder_use_cache
      :value: False



   .. py:property:: db_dir
      :type: str


      Get the database directory for the vector index.

      :return: Path to the database directory.



   .. py:method:: from_context(context, k, weights, embedder_name = None)
      :classmethod:


      Create a KNNScorer instance using a Context object.

      :param context: Context containing configurations and utilities.
      :param k: Number of closest neighbors to consider during inference.
      :param weights: Weighting strategy for scoring.
      :param embedder_name: Name of the embedder, or None to use the best embedder.
      :return: Initialized KNNScorer instance.



   .. py:method:: get_embedder_name()

      Get the name of the embedder.

      :return: Embedder name.



   .. py:method:: fit(utterances, labels)

      Fit the scorer by training or loading the vector index.

      :param utterances: List of training utterances.
      :param labels: List of labels corresponding to the utterances.
      :raises ValueError: If the vector index mismatches the provided utterances.



   .. py:method:: predict(utterances)

      Predict class probabilities for the given utterances.

      :param utterances: List of query utterances.
      :return: Array of predicted probabilities for each class.



   .. py:method:: predict_with_metadata(utterances)

      Predict class probabilities along with metadata for the given utterances.

      :param utterances: List of query utterances.
      :return: Tuple of predicted probabilities and metadata with neighbor information.



   .. py:method:: clear_cache()

      Clear cached data in memory used by the vector index.



   .. py:method:: dump(path)

      Save the KNNScorer's metadata and vector index to disk.

      :param path: Path to the directory where assets will be dumped.



   .. py:method:: load(path)

      Load the KNNScorer's metadata and vector index from disk.

      :param path: Path to the directory containing the dumped assets.


